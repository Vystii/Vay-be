@charset "UTF-8";
/**
     * On injecte toutes les variables directement dans ce fichier.
     */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**
 * On a un bug avec la fonction color-yiq à partir de la version bootstrap5, 
 * border-color: rgba(color-yiq($wbu-background), 20%); ne fonctionne pas.
 * ( raison cette fonction est repressier , il faut utiliser color-contrast() ).
 */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**
 * On a un bug avec la fonction color-yiq à partir de la version bootstrap5, 
 * border-color: rgba(color-yiq($wbu-background), 20%); ne fonctionne pas.
 * ( raison cette fonction est repressier , il faut utiliser color-contrast() ).
 */
.vaybe-dashboard > * {
  min-height: 50vh;
}
.vaybe-dashboard > * .dashboard-user-info table th,
.vaybe-dashboard > * .dashboard-user-info table td {
  background-color: unset;
}
.vaybe-dashboard > * .dashboard-menu {
  box-shadow: 0 0 55px -50px black;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/